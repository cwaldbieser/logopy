
to title :title
print []
print (sentence "= :title "=)
end

make "space "\ ; a quoted space

title [Printing and expressions]
print "hello
print 0.25
print (1.5 * 10.0)
print (2 + 3)
print (2 + 3.5)
print 007
print .7
print [hello world]
(print [hello world] "something [else] [and now for [the larch] something completely different ...])
show [hello world]

title "MAKE
make "name "Carl
(print "Hello :name)

title [Dynamic Scopes]
to greeting :name
(print [Oh, why hello there,] :name)
end

greeting "Susan
greeting "Garth
greeting :name
print [ ]
to introduction
print [Allow me to introduce myself.  I am Logo.]
print [Why, yes!  It is Greek.  From logos-- meaning word or thought.]
end

to conversation :name
greeting "Carl
introduction
(print [But you can call me] word :name ".)
end

conversation "Lo-lo
print []
print word "ABC "def
print (word "ABC "def "GHI "jkl "MNO "pqr "STU "vwx "YZ)

title "SENTENCE
show (sentence "The "quick [ brown fox [ jumps over ] the ] [lazy] "dog.)
show list "A [B]
show (list [1 2 3] "two [III])

title "FPUT
show fput "elephant [dog cat]
show lput "cyan [red blue green]

title "COMBINE
show combine "a [b c]
show combine "key "board
show combine [1 2] [3]
; Error condition - Expected word, got a list.
; show combine [1 2] "three

title "REVERSE
show reverse [one two three]

title "FIRST
show first "Cookie
show first [ green blue cyan]

title "FIRSTS
make "planets [mercury venus earth mars jupiter saturn uranus neptune]
show firsts :planets
make "number.reps [[1 one i] [2 two ii] [3 three iii]]
show firsts :number.reps
; Next is an error.
; show firsts [[2 2] [] [1] [3 3 3]]

title "LAST
print (sentence [>>> show last "Hello]) show last "Hello
print (sentence [>>> show last :planets]) show last :planets
print (sentence [>>> show last :number.reps]) show last :number.reps

title "BUTFIRST
print (sentence [>>> show bf "Cookie]) show bf "Cookie
print (sentence [>>> show bf :planets]) show bf :planets

title "BUTFIRSTS
print (sentence [>>> show bfs :planets]) show bfs :planets
print (sentence [>>> show bfs :number.reps]) show bfs :number.reps

title "BUTLAST
print (sentence [>>> show bf "Cookie]) show bf "Cookie
print (sentence [>>> show bl :planets]) show bl :planets

title "ITEM
print (sentence [>>> show item 4 "Cookie]) show item 4 "Cookie
print (sentence [>>> show item 3 :planets]) show item 3 :planets

title "PICK
print (sentence [>>> show pick "abcdefghijklmnopqrstuvwxyz]) show pick "abcdefghijklmnopqrstuvwxyz
print (sentence [>>> show pick :planets]) show pick :planets

title "REMOVE
print (sentence [>>> show remove "o "Cookie]) show remove "o "Cookie
print (sentence [>>> show remove "uranus :planets]) show remove "uranus :planets

title "REMDUP
print (sentence [>>> show remdup "ebeleeue]) show remdup "ebeleeue
print (sentence [>>> show remdup [one 3 two two 3]]) show remdup [one 3 two two 3]

title "QUOTED
print (sentence [>>> show quoted :name]) show quoted :name
print (sentence [>>> show quoted :planets]) show quoted :planets

title [PUSH and POP]
print (sentence [>>> make "stack []]) make "stack []
print (sentence [>>> push "stack "bottom]) push "stack "bottom
print (sentence [>>> push "stack "middle]) push "stack "middle
print (sentence [>>> push "stack "top]) push "stack "top
print (sentence [>>> show :stack]) show :stack
print (sentence [>>> show pop "stack]) show pop "stack
print (sentence [>>> show pop "stack]) show pop "stack
print (sentence [>>> show pop "stack]) show pop "stack
print (sentence [>>> show :stack]) show :stack

title [QUEUE and DEQUEUE]
print (sentence [>>> make "queue []]) make "queue []
print (sentence [>>> queue "queue "first]) queue "queue "first
print (sentence [>>> queue "queue "second]) queue "queue "second
print (sentence [>>> queue "queue "third]) queue "queue "third
print (sentence [>>> show :queue]) show :queue
print (sentence [>>> show dequeue "queue]) show dequeue "queue
print (sentence [>>> show dequeue "queue]) show dequeue "queue
print (sentence [>>> show dequeue "queue]) show dequeue "queue
print (sentence [>>> show :queue]) show :queue

title [Predicates]
print (sentence [>>> wordp :name]) print wordp :name
print (sentence [>>> wordp 14]) print wordp 14
print (sentence [>>> wordp 14.7]) print wordp 14.7
print (sentence [>>> wordp :planets]) print wordp :planets
print (sentence [>>> listp :name]) print listp :name
print (sentence [>>> listp :planets]) print listp :planets
print (sentence [>>> emptyp :name]) print emptyp :name
print (sentence [>>> emptyp :planets]) print emptyp :planets
print (sentence [>>> emptyp []]) print emptyp []
print (sentence [>>> emptyp "]) print emptyp "
print (sentence [>>> equalp :planets :planets]) print equalp :planets :planets
print (sentence [>>> equalp :name :planets]) print equalp :name :planets
print (sentence [>>> notequalp :name :planets]) print notequalp :name :planets
print (sentence [>>> notequalp :planets :planets]) print notequalp :planets :planets
print (sentence [>>> :planets = :planets]) print :planets = :planets
print (sentence [>>> :name = :planets]) print :name = :planets
print (sentence [>>> :name <> :planets]) print :name <> :planets
print (sentence [>>> :planets <> :planets]) print :planets <> :planets
print (sentence [>>> (2+3) * 2 = 100 / 10]) print (2+3) * 2 = 100 / 10
print (sentence [>>> beforep "apple "banana]) print beforep "apple "banana
print (sentence [>>> beforep 3 11]) print beforep 3 11
print (sentence [>>> .eq [tree] [tree]]) print .eq [tree] [tree]
print (sentence [>>> .eq "tree "tree]) print .eq "tree "tree
print (sentence [>>> .eq :planets :planets]) print .eq :planets :planets
print (sentence [>>> .eq 3 3]) print .eq 3 3
print (sentence [>>> memberp "venus :planets]) print memberp "venus :planets
print (sentence [>>> memberp "pluto :planets]) print memberp "pluto :planets
print (sentence [>>> memberp "o "book]) print memberp "o "book
print (sentence [>>> memberp "e "book]) print memberp "e "book
print (sentence [>>> substringp "book "bookkeeper]) print substringp "book "bookkeeper
print (sentence [>>> substringp "book "boots]) print substringp "book "boots
print (sentence [>>> substringp 0 707]) print substringp 0 707
print (sentence [>>> numberp "Hello]) print numberp "Hello
print (sentence [>>> numberp 17]) print numberp 17
print (sentence [>>> numberp 0.17]) print numberp 0.17
print (sentence [>>> numberp 001]) print numberp 001

title "COUNT
print (sentence [>>> count :name]) print count :name
print (sentence [>>> count :planets]) print count :planets
print (sentence [>>> count 100]) print count 100

title [UNICODE and CHAR]
print (sentence [>>> unicode "A]) print unicode "A
print (sentence [>>> char 65]) print char 65
; Error
; print (sentence [>>> unicode "AB]) print unicode "AB

title "MEMBER
print (sentence [>>> member "mars :planets]) print member "mars :planets
print (sentence [>>> member "k "donkey]) print member "k "donkey

title [UPPERCASE and LOWERCASE]
print (sentence [>>> lowercase "MERCURY]) print lowercase "MERCURY
print (sentence [>>> uppercase "jupiter]) print uppercase "jupiter

title "TYPE
print (sentence [>>> type "book print "keeper])
type "book print "keeper

;Uncomment for READLIST test.
;title "READLIST
;print (sentence [>>> show (sentence readlist)]) show (sentence readlist)

title [Arithmatic: SUM, DIFFERENCE, PRODUCT, QUOTIENT, +-*/]
print [>>> make "n 5] make "n 5
print (sentence [>>> sum 3 4]) print sum 3 4
print (sentence [>>> sum :n 2]) print sum :n 2
print (sentence [>>> :n + 2]) print :n + 2
print (sentence [>>> (sum :n 5 67)]) print (sum :n 5 67)
print (sentence [>>> difference 9 5]) print difference 9 5
print (sentence [>>> 9 - :n]) print 9 - :n
print (sentence [>>> product 2 3]) print product 2 3
print (sentence [>>> product :n 3]) print product :n 3
print (sentence [>>> product :n 3 3]) print (product :n 3 3)
print (sentence [>>> quotient 360 15]) print quotient 360 15
print (sentence [>>> 360 / :n]) print 360 / :n
print (sentence [>>> 2 * ((sum 3 -1) / -2) - 7]) print 2 * ((sum 3 -1) / -2) - 7

title [MODULO and REMAINDER]
print (sentence [>>> remainder 5 2]) print remainder 5 2
print (sentence [>>> remainder -5 2]) print remainder -5 2
print (sentence [>>> remainder 5 -2]) print remainder 5 -2
print (sentence [>>> modulo -5 2]) print modulo -5 2
print (sentence [>>> modulo 5 -2]) print modulo 5 -2

title [INT and ROUND]
print (sentence [>>> int -25.1]) print int -25.1
print (sentence [>>> int -25.7]) print int -25.7
print (sentence [>>> round -25.1]) print round -25.1
print (sentence [>>> round -25.7]) print round -25.7
; Errors
;print (sentence [>>> int "bar]) print int "bar
;print (sentence [>>> round [1 3]]) print round [1 3]

title [SQRT and POWER]
print (sentence [>>> sqrt 25]) print sqrt 25
; Errors
;print (sentence [>>> sqrt -25]) print sqrt -25
;print (sentence [>>> sqrt "baz]) print sqrt "baz
print (sentence [>>> power 2 5]) print power 2 5
print (sentence [>>> power 5 2]) print power 5 2
print (sentence [>>> power -1.5 3]) print power -1.5 3
print (sentence [>>> power 16 0.25]) print power 16 0.25

title [EXP, LN, and LOG10]
print (sentence [>>> exp 1]) print exp 1
print (sentence [>>> ln exp 5]) print ln exp 5
print (sentence [>>> log10 1000]) print log10 1000

title [Trig functions- COS, SIN, RADCOS, RADSIN, ARCTAN, RADARCTAN]
print (sentence [>>> cos 180]) print cos 180
print (sentence [>>> radcos 3.147]) print  radcos 3.147
print (sentence [>>> sin 90]) print  sin 90
print (sentence [>>> radsin 3.147 / 2]) print  radsin 3.147 / 2
print (sentence [>>> 2 * (radarctan 0 1)]) print  2 * (radarctan 0 1)

title [Sequence Generation- ISEQ, RSEQ]
print (sentence [>>> iseq 3 7]) print iseq 3 7
print (sentence [>>> iseq 7 -3]) print iseq 7 -3
print (sentence [>>> rseq 1 16 4]) print rseq 1 16 4
print (sentence [>>> rseq 16 1 4]) print rseq 16 1 4
; Errors
;print (sentence [rseq "a 1 4]) print rseq "a 1 4

title [Relational Operators- LESSP, LESSEQUALP, GREATERP GREATEREQUALP, < > <= >=]
print (sentence [>>> lessp 5 7]) print lessp 5  7
print (sentence [>>> 5 < 7]) print 5 < 7
print (sentence [>>> lessp 5 5]) print lessp 5  5
print (sentence [>>> lessequalp 5 7]) print lessequalp 5 7
print (sentence [>>> 5 <= 7]) print 5 <= 7
print (sentence [>>> lessequalp 5 5]) print lessequalp 5 5
print (sentence [>>> lessequalp 5 3]) print lessequalp 5 3
print (sentence [>>> greaterp 5 3]) print greaterp 5  3
print (sentence [>>> 5 > 3]) print 5 > 3
print (sentence [>>> greaterp 5 5]) print greaterp 5  5
print (sentence [>>> greaterequalp 5 3]) print greaterequalp 5 3
print (sentence [>>> 5 >= 3]) print 5 >= 3
print (sentence [>>> greaterequalp 5 5]) print greaterequalp 5 5
print (sentence [>>> greaterequalp 5 7]) print greaterequalp 5 7
; Errors
;print (sentence [>>> 5 >= "a]) print 5 >= "a

title "RANDOM
print (sentence [>>> random 10]) 
print random 10
print (sentence [>>> (random 70 79)]) 
print (random 70 79)

title [Logical Operators-- AND, OR, NOT]
print (sentence [>>> and 5 <= 7 7 < 3]) 
print and 5 <= 7 7 < 3 
print (sentence [>>> and "true "true]) 
print and "true "true 
print (sentence [>>> and "true "false])
print and "true "false
print (sentence [>>> and "false "true])
print and "false "true
print (sentence [>>> and "false "false])
print and "false "false
print (sentence [>>> or "true "true])
print or "true "true 
print (sentence [>>> or "true "false])
print or "true "false 
print (sentence [>>> or "false "true])
print or "false "true
print (sentence [>>> or "false "false])
print or "false "false
print (sentence [>>> not "true])
print not "true
print (sentence [>>> not "false])
print not "false 

title "THING
print (sentence [make "planets [mercury venus earth mars jupiter saturn uranus neptune]])
make "planets [mercury venus earth mars jupiter saturn uranus neptune]
print (sentence [>>> show thing "planets])
show thing "planets

title [RUN and RUNRESULT]
print [>>> make "result run [sum 5 2]] 
make "result run [sum 5 2]
print (sentence [>>> print :result])
print :result
print (sentence [>>> show runresult [sum 7 7]]) 
show runresult [sum 7 7]
;print (sentence [>>> show runresult [make "greeting "Hello]])
print (sentence [>>> show runresult [make "greeting "Hello] \;No output.])
show runresult [make "greeting "Hello]

title [REPEAT and REPCOUNT]
print (sentence [>>> repeat 3 [print repcount]])
repeat 3 [print repcount]
print (sentence [>>> repeat 3 [make "j # repeat 3 [show (list # "* j "= # * j)]]])
repeat 3 [make "j # repeat 3 [print (list # "* :j "= # * :j)]]

title [IF, IFELSE]
print (sentence [>>> make "name "Carl])
make "name "Carl
print (sentence [>>> if equalp :name "Carl [(print "Hello, :name)]])
if equalp :name "Carl [(print "Hello, :name)]
print (sentence [>>> (if :name = "Fred [print [This won't print]] [ print [But this will.]])]) 
(if :name = "Fred [print [This won't print]] [ print [But this will.]])
print (sentence [>>> ifelse :name = "Fred [print [This won't print]] [ print [But this will.] ]]) 
ifelse :name = "Fred [print [This won't print]] [ print [But this will.] ]

title [Loops- FOR, DO.WHILE, WHILE, UNTIL]
print (sentence [>>> make "n 5])
make "n 5
print (sentence [>>> for [ x 1 7 2 ] [ print :x ] :])
for [ x 1 7 2 ] [ print :x ]
print (sentence [>>> for [ x 1 [(:n + :n) - 3]] [ print :x ] :])
for [ x 1 [(:n + :n) - 3]] [ print :x ]
print (sentence [>>> make "n 3])
print (sentence [>>> do.while [print :n make "n (:n - 1)] [:n >= -3]])
make "n 3
do.while [
    print :n
    make "n (:n - 1)
] [:n >= -3]
print (sentence [>>> make "n 4 while [:n >= -2] [print :n make "n (:n - 1)]])
make "n 4
while [:n >= -2] [
    print :n 
    make "n (:n - 1)
]
print (sentence [>>> make "n 0])
print (sentence [>>> do.until [print :n make "n (:n - 1)] [:n < -5]])
make "n 0
do.until [
    print :n
    make "n (:n - 1)
] [:n < -5]
print (sentence [>>> make "n 2 until [:n < -2] [print :n make "n (:n - 1)]])
make "n 2
until [:n < -2] [
    print :n 
    make "n (:n - 1)
]

title [CASE and COND]
print (sentence [>>> make "color "green print case :color [ [[red orange yellow] warm] [[blue green purple] cool] [else [I'm not sure about that color.]] ]])
make "color "green
print case :color [
    [[red orange yellow] warm]
    [[blue green purple] cool]
    [else [I'm not sure about that color.]]
]
print (sentence [>>> make "wordq [] queue "wordq "grape queue "wordq "orange queue "wordq "79th])
print (sentence [>>> while [not emptyp :wordq] \[])
print (sentence [... \ \ \ \     make "w dequeue "wordq])
print (sentence [... \ \ \ \     type [Testing word "] type :w type [" ...] type "\\\  ])
print (sentence [... \ \ \ \     cond \[])
print (sentence [... \ \ \ \ \ \ \ \         [[memberp first :w "aeiou] print [Starts with a vowel.]]])
print (sentence [... \ \ \ \ \ \ \ \         [[memberp first :w "qwrtypsdfghjklzxcvbnm] print [Starts with a consonant.]]])
print (sentence [... \ \ \ \ \ \ \ \         [else print [Starts with neither a vowel nor a consonant.]]])
print (sentence [... \ \ \ \     \]])
print (sentence [... \]])
make "wordq []
queue "wordq "grape
queue "wordq "orange
queue "wordq "79th
while [not emptyp :wordq] [
    make "w dequeue "wordq
    type [Testing word "] type :w type [" ...] type "\\\  
    cond [
        [[memberp first :w "aeiou] print [Starts with a vowel.]]
        [[memberp first :w "qwrtypsdfghjklzxcvbnm] print [Starts with a consonant.]]
        [else print [Starts with neither a vowel nor a consonant.]]
    ]
]

title "FOREACH
print (sentence [>>> foreach [a b c] [ type # type "\\\   print ? ]])
foreach [a b c] [ type # type "\  print ? ]
print (sentence [>>> (foreach [a b c] [3 5 7] [ type # type "\\\   print list ?2 ?1  ])])
(foreach [a b c] [3 5 7] [ type # type "\\\   print list ?2 ?1  ])
print (sentence [>>> make "planets [mercury venus earth mars jupiter staturn uranus neptune]])
print (sentence [>>> make "kinds [terrestrial terrestrial terrestrial terrestrial jovan jovan jovan jovan]])
print (sentence [>>> (foreach :planets :kinds [[planet kind] print (list # :planet :kind)])])
make "planets [mercury venus earth mars jupiter staturn uranus neptune]
make "kinds [terrestrial terrestrial terrestrial terrestrial jovan jovan jovan jovan]
(foreach :planets :kinds [[planet kind] print (list # :planet :kind)])
print (sentence [>>> (foreach :planets :kinds \[])
print (sentence [... \ \ \ \ [planet kind]])
print (sentence [... \ \ \ \ [type [Planet name:] type "\\\   print :planet]])
print (sentence [... \ \ \ \ [type [Kind of planet:] type "\\\   print :kind]])
print (sentence [... \ \ \ \ [print []]])
print (sentence [... \])])
(foreach :planets :kinds [
    [planet kind]
    [type [Planet name:] type "\  print :planet]
    [type [Kind of planet:] type "\  print :kind]
    [print []]
])

title [MAP and MAP.SE]
print (sentence [>>> show map [product ? ?] [1 2 3]])
show map [product ? ?] [1 2 3]
print (sentence [>>> show map.se [butfirst ?] [[a b c] [x y z] rgb]])
show map.se [butfirst ?] [[a b c] [x y z] rgb]

title "FILTER
print (sentence [>>> show filter [memberp first ? "aeiou] [mercury venus earth mars jupiter saturn uranus neptune]])
show filter [memberp first ? "aeiou] [mercury venus earth mars jupiter saturn uranus neptune] 

title "FIND
print (sentence [>>> show find [memberp first ? "aeiou] [mercury venus earth mars jupiter saturn uranus neptune]])
show find [memberp first ? "aeiou] [mercury venus earth mars jupiter saturn uranus neptune] 
print (sentence [>>> show find [(count ?) < 5 ] [mercury venus earth mars jupiter saturn uranus neptune]])
show find [(count ?) < 5 ] [mercury venus earth mars jupiter saturn uranus neptune] 

title "REDUCE
print (sentence [>>> show reduce [sum ?1 ?2] [1 2 3 4 5 6]])
show reduce [sum ?1 ?2] [1 2 3 4 5 6]
print (sentence [>>> show last reduce [[x y] list "label sum last :x last :y] [[a 1] [b 2] [c 3]]])
show last reduce [[x y] list "label sum last :x last :y] [[a 1] [b 2] [c 3]]

title "CASCADE
print (sentence [>>> show (cascade 3 [ sum ?1 2 ] 1 [ product ?2 2 ] 1 [(list ?1 ?2)])])
show (cascade 3 [ sum ?1 2 ] 1 [ product ?2 2 ] 1 [(list ?1 ?2)])

